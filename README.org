* Interpolation library

  This library provides various interpolations such as piece-wise constant, linear or cubic interpolation. Right now the main feature is that it provides a function which takes bunch of one dimensional interpolations and creates an interpolation in arbitrary dimension.

** One dimensional interpolation
   
   Assume we have a function =double fun(int i)= defined on integers and we want to extend this function to floating point numbers with piece-wise interpolation. This library provides a function object =LinearInterpolation=
   #+BEGIN_SRC c++
     auto LinearInterpolation = [](auto &&fun, auto x){
       auto wx = x - floor(x);
       int ix = (int)floor(x);
  
       return   wx * fun(ix + 1) + (1 - wx) * fun(ix);
     }
   #+END_SRC
   =LinearInterpolation= is a callable object which accepts a function =fun=, which is assumed to be a function accepting a single integer, and floating point number =x= and return an interpolation of =fun= at point =x=. In general one dimensional interpolation is assumed to be in the following form
   #+BEGIN_SRC c++
     auto CustomInterpolation = [](auto &&fun, auto x) {
       // some computation
       return /*interpolated function value at x*/;
     }
   #+END_SRC

** Dimension wise interpolation

   When we have function =double fun(int i, int j, int k)= and we want to preform a piece-wise linear interpolation at point =(x,y,z)= we can simply do
   #+BEGIN_SRC c++
     auto interpolation_pwl_3d = InterpolationDimWise(
	 LinearInterpolation, LinearInterpolation, LinearInterpolation);

     double interpolated_value = interpolation_pwl_3d(fun,x,y,z);
   #+END_SRC

   However, if we want to do linear interpolation over the first two dimensions and piece-wise constant 

*** Interpolation order problem
    
    Right now the interpolations are done in order from the last dimension to the first. I.e. the function =InterpolationDimWise(InterpolationX,InterpolationY)= takes a function =fun(int i,int j)= and extends it to a =fun(double x, double y)= the two following schemetical steps
      1. =fun(int i, int j)= --=InterpolationY=--> =fun(int i, double y)=
      2. =fun(int i, double y)= --=InterpolationX=--> =fun(double x, double y)=
	 
    You can imagine that we could to the two dimensional interpolation in a reverse order, i.e. first interpolate over the first coordinate and then over the second. Sometimes this 
